# https://flang.llvm.org/docs/

import sys
import functools
import subprocess
from numpy.distutils.fcompiler import FCompiler
from os.path import join, normpath

compilers = ['FlangNewFCompiler']


class FlangNewFCompiler(FCompiler):
    compiler_type = 'flang-new'
    description = 'flang LLVM compiler'
    version_pattern = r'\s*flang-new version (?P<version>[\d.-]+).*'

    executables = {
        'version_cmd': ["<F77>", "--version"],
        'compiler_f77': ["flang-new", "-flto=full"],
        'compiler_fix': ["flang-new", "-flto=full", "-ffixed-form"],
        'compiler_f90': ["flang-new", "-flto=full"],
        'linker_so': ["<F90>", "-fuse-ld=lld"],
        'archiver': ["llvm-ar", "-rc"],
        'ranlib': ["llvm-ranlib"],
    }
    
    module_dir_switch = '-module-dir '
    module_include_switch = '-I'

    def get_libraries(self):
        opt = FCompiler.get_libraries(self)
        return opt

    def get_lib_dir(self):
        try:
            output = subprocess.check_output(self.compiler_f77 + ['--version'])
        except (OSError, subprocess.CalledProcessError):
            pass
        else:
            flang_dir = output.splitlines()[-1].split()[-1].strip().decode("utf-8")
            return normpath(join(flang_dir, '..', 'lib'))
        return None

    @functools.lru_cache(maxsize=128)
    def get_library_dirs(self):
        """List of compiler library directories."""
        opt = FCompiler.get_library_dirs(self)
        opt.append(self.get_lib_dir())
        return opt
        
    def get_flags(self):
        return ['']

    def get_flags_free(self):
        return []

    def get_flags_opt(self):
        return ['-O3']

    def get_flags_debug(self):
        return ['-g']

    def get_flags_linker_so(self):
        return ["-shared", '-fPIC']

    def get_flags_arch(self):
        return []

    def runtime_library_dir_option(self, dir):
        raise NotImplementedError


if __name__ == '__main__':
    from distutils import log
    log.set_verbosity(2)
    from numpy.distutils import customized_fcompiler
    if 'flang-new' in sys.argv:
        print(customized_fcompiler(compiler='flang-new').get_version())
    else:
        print(customized_fcompiler(compiler='gfortran').get_version())
